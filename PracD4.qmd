---
title: "PracD4"
author: Fabio Iafrate
format: html
editor: visual
---

# Day 4 Practical {.unnumbered style="text-align: center"}

> Using **tidyr** and **dplyr** to manipulate data frames

## Displaying the Flights Data Set {.unnumbered}

An alternative way to display a data set without using the **print()** function is to transform the data set into a tibble and just call the tibble

```{r}
options(repos = c(CRAN = "https://cloud.r-project.org"))

install.packages("tidyverse")
install.packages("nycflights13")
library(tidyverse)
library(nycflights13)

flights_tib <- as_tibble(flights)
flights_tib
```

## Rewriting Code Using *dplyr* and the *pipe* {.unnumbered}

The given code's purpose was to determine the mean distance and stand deviation of distance for each carrier (airline) in the first month of the year, and then display the airlines with these statistics in ascending order of mean distance.

```{r}
dist_tbl <- flights |> filter(month == 1) |> group_by(carrier) |>
  summarise(
    mean_distance = mean(distance, na.rm = TRUE),
    sd_distance = sd(distance, na.rm= TRUE)
    ) |> arrange(mean_distance) #does everything besides displaying 
dist_tbl #displays
```

## Standard Deviation Explanation {.unnumbered}

### Why Some Carriers Have SD = 0 {.unnumbered}

For a carrier to have a standard deviation of 0, that would imply that all trips are the same distance, which means that the carriers only fly 1 route that month. The carriers which have a standard deviation of 0 are:

-   YV

-   F9

-   AS

-   HA

```{r}

carriers_zero <- c("YV", "F9", "AS", "HA")
flights |> filter(
  month == 1, 
  carrier %in% carriers_zero
  ) |> group_by(carrier) |> 
  summarize(
    num_unique_routes = n_distinct(paste(origin, dest, sep = "-")), 
    route = unique(paste(origin, dest, sep = "-")))

```

This code displays the carriers which have 1 route in the 1st month (1 unique route). It confirms the hypothesis that the carriers with a standard deviation of 0 only have 1 route, travelling the same distance.

### Why a Carrier has SD = NA {.unnumbered}

*NA* is just a representation of missing values. This means that there is not sufficient data to determine the standard deviation of the carrier. This would imply that either there were no flights in the first month or there was only 1 flight in the first month, thus no standard deviation could be determined. The carrier with *NA* standard deviation is OO.

```{r}

flights |> filter(
  month == 1, 
  carrier=="OO"
  ) |> group_by(carrier) |> count(
    carrier, 
    name = "number_of_flights")

```

This code determines the number of flights that carrier OO does. It shows that OO only has 1 flight, thus no standard deviation could be calculated.

## Data Frame with Average Departure Delay rows {.unnumbered}

The point of this exercise was to create a data frame that would display the average departure delay of each carrier in each month as rows using **dplyr** and **tidyr**. The tibble must be grouped by the month and carrier, and uses the **summarize()** function to obtain the average delays of each carrier for each month. The tibble was then pivoted to place the average delays as the rows.

```{r}
#Construct the grouped column tibble
delay_tbl <- flights |> group_by(month, carrier) |>
  summarise(
    avg_delay = mean(dep_delay, na.rm = TRUE), 
    .groups = "drop") #must drop groups at end or else it's a weird tibble

#Create the data frame with the average delays as rows
delay_wide <- delay_tbl |> pivot_wider(
  names_from = carrier, 
  values_from = avg_delay)
delay_wide #display

```

## Proportion of Flights Recovering from Delays {.unnumbered}

A flight is considered **recovered** if its departure is delayed (**dep_delay \> 0**) and it arrives early or on-time (**arr_delay \<= 0**). In essence, we have to calculate the total number of flights which arrived on time but had their departure delayed, and then divide it by the total number of flights. We also needed to remove all instances of *NA* values as it would inflate the total number of flights erroneously.

```{r}

flights |> drop_na(dep_delay, arr_delay) |> 
  summarize(
    num_flights = n(), 
    num_recovered = sum(dep_delay>0 & arr_delay <=0),
    proportion_delayed_arrived_on_time = num_recovered/num_flights)

```

From the code, we can see that the proportion of flights which recovered is 0.1082708, i.e. approximately 10.83% of flights.

## Airline Performance {.unnumbered}

All the sub-questions will consist of us performing analysis on routes that have multiple carriers flying them, so we will create a data frame consisting of this data.

```{r}

multi_carrier_routes <- flights |> 
  group_by(origin, dest) |> 
  filter(n_distinct(carrier) > 1) |> 
  ungroup()
multi_carrier_routes

```

### Routes with More than 1 Carrier/Airline {.unnumbered}

```{r}

routes <- multi_carrier_routes |> 
  select(origin, dest) |> 
  distinct(origin, dest)
routes

```

### Average Arrival Delay of Airlines on These Routes {.unnumbered}

```{r}
#The more comprehensive data frame
arr_delay_carrier <- multi_carrier_routes |>
  group_by(origin, dest, carrier) |>
  summarize(
    avg_arr_delay = mean(arr_delay, na.rm = TRUE),
    .groups = "drop") |> 
  left_join(airlines, by = "carrier")
arr_delay_carrier
```

```{r}
# The more selective data frame
airline_names <- arr_delay_carrier |> 
  select(name, avg_arr_delay, origin, dest) 
airline_names
```

The airline names needed to be attached to the data frame with **left_join().**

### Best-Worst Airlines {.unnumbered}

```{r}
#This will show you more data
best_worst_delay <- arr_delay_carrier |>
  group_by(origin, dest) |> 
  summarize(
    best_delay = min(avg_arr_delay, na.rm = TRUE),
    worst_delay = max(avg_arr_delay, na.rm = TRUE),
    best_airline = name[which.min(avg_arr_delay)],
    worst_airline = name[which.max(avg_arr_delay)],
    delay_diff = worst_delay - best_delay,
    .groups = "drop")
best_worst_delay
```

```{r}
#This shows you the more specific data
best_worst_airline <- best_worst_delay |> 
  select(origin, dest, best_airline, worst_airline)
best_worst_airline
```

I decided to also calculate the difference in delays between the best and worst airlines for each route as it would be used later.

### Route with Greatest Delay Difference {.unnumbered}

This will make use of the above data frame "best_worst_delay".

```{r}
greatest_diff <- best_worst_delay |> 
  arrange(desc(delay_diff)) |> 
  filter(delay_diff == max(delay_diff, na.rm = TRUE)) |>
  select(
    origin, 
    dest, 
    best_airline, 
    worst_airline, 
    delay_diff)
greatest_diff
```

> It should be noted that this could also be achieved by slicing the ordered data set at the first row, as that will show the maximum delay difference (~~this is left as an exercise to the reader~~).

### Reason for this Largest Delay Difference {.unnumbered}

Potential reasons for this delay difference could be due to insufficient data (i.e. one airline has made a sizable number of trips along the route and the other has only a few very bad/good trips which will skew the data). Other reasons would be unsubstantiated as we do not have data for things such as weather or cleaning times.

```{r}
multi_carrier_routes |> 
  left_join(airlines, by = "carrier") |>
  group_by(origin, dest, carrier ,name) |>
  summarize(flight_count = n(), .groups = "drop") |>
  filter(
    origin == "JFK", 
    dest == "ATL", 
    carrier %in% c("9E", "EV"))

```

This code isolates the data of the airlines of interest in order to count how many flights were made on the route with the greatest delay difference. We can see that ExpressJet Airlines Inc. has only made 1 flight along that route which means its average delay is the value of the delay on its only flight, skewing the data.

## Missing Entries, Typos and Inconsistencies {.unnumbered}

In order to find missing entries, typos and inconsistencies in the data, we first have to load the data. I did this by creating a data object and assigning the data set to it.

```{r}
#| echo: false
weird_data <- structure(list(id = c("id_1", "id_2", "id_3", "id_4", "id_5", 
                      "id_6", "id_7", "id_8", "id_9", "id_10", "id_11", "id_12", "id_13", 
                      "id_14", "id_15", "id_16", "id_17", "id_18", "id_19", "id_20", 
                      "id_21", "id_22", "id_23", "id_24", "id_25", "id_26", "id_27", 
                      "id_28", "id_29", "id_30", "id_31", "id_32", "id_33", "id_34", 
                      "id_35", "id_36", "id_37", "id_38", "id_39", "id_40", "id_41", 
                      "id_42", "id_43", "id_44", "id_45", "id_46", "id_47", "id_48", 
                      "id_49", "id_50"), age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, 
                                                 73L, 62L, 56L, 71L, 33L, 73L, 44L, 45L, 46L, 24L, 70L, 46L, 76L, 
                                                 47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, 61L, 28L, 38L, 55L, 33L, 
                                                 36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, 26L, 28L, 60L, 29L, 
                                                 42L, 46L, 79L, 72L), gender = c("male", "male", "male", "female", 
                                                                                 "female", "male", "female", "male", "male", "female", "female", 
                                                                                 "male", "male", "female", "male", "male", "male", "male", "female", 
                                                                                 "male", "male", "male", "male", "female", "femal", "male", "female", 
                                                                                 "female", "female", "female", "male", "female", "female", "female", 
                                                                                 "male", "male", "female", "male", "female", "female", "male", 
                                                                                 "female", "female", "male", "male", "female", "male", "male", 
                                                                                 "male", "female"), height = c(174.4, 197.7, 174.1, 194.5, NA, 
                                                                                                               180.4, 170.5, 157.4, 196.8, 165.1, 153, 197.4, 186, 157.1, 177.5, 
                                                                                                               197.7, 179.3, 170.2, 182.4, NA, 165.4, 161, 168.5, 199.2, 157.7, 
                                                                                                               154.6, 157.1, 184.5, 181, 194.6, 183.6, 186.9, 176.1, 183, 191.1, 
                                                                                                               189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, 192.1, 161.6, 162, 
                                                                                                               153.8, 162.3, 186.6, 192.4, 174.9), weight = c(69.4, 62.3, 55.6, 
                                                                                                                                                              69.5, 78.6, 60.8, 72.2, 60.9, 75.1, 67.7, 82.5, 68.7, 67.8, 76.7, 
                                                                                                                                                              87, 61.1, 70.6, 63.3, 81.5, 59.2, 93.2, 87.3, 83.4, 80.9, 68.6, 
                                                                                                                                                              76.5, 93.7, 79.1, 92, 65.6, 85.4, 63.3, 79.7, 74.1, 63.3, 78.2, 
                                                                                                                                                              95.7, 95.1, 63.7, 66.1, 99.3, 81, 96.9, 73.3, 70.3, 83, 57.6, 
                                                                                                                                                              78.6, 61.9, 98.1), blood_type = c("O", "A", "O", "O", "B", "AB", 
                                                                                                                                                                                                "O", "O", "O", "AB", "A", "O", "O", "O", "B", "A", "B", "AB", 
                                                                                                                                                                                                "O", "AB", "A", "AB", "O", "B", "A", "A", "B", "AB", "A", "B", 
                                                                                                                                                                                                "B", "A", "O", "O", "O", "B", "O", "A", "A", "B", "A", "O", "AB", 
                                                                                                                                                                                                "A", "A", "O", "O", "B", "A", "O"), disease_status = c("diseased", 
                                                                                                                                                                                                                                                       "healthy", "healthy", "healthy", "healthy", "healthy", "diseased", 
                                                                                                                                                                                                                                                       "healthy", "diseased", "Healthy", "diseased", "healthy", "diseased", 
                                                                                                                                                                                                                                                       "healthy", "diseased", "healthy", "healthy", "healthy", "healthy", 
                                                                                                                                                                                                                                                       "healthy", "healthy", "diseased", "healthy", "diseased", "healthy", 
                                                                                                                                                                                                                                                       "healthy", "healthy", "healthy", "diseased", "diseased", "healthy", 
                                                                                                                                                                                                                                                       "healthy", "healthy", "diseased", "diseased", "diseased", "healthy", 
                                                                                                                                                                                                                                                       "diseased", "healthy", "healthy", "healthy", "healthy", "healthy", 
                                                                                                                                                                                                                                                       "diseased", "diseased", "diseased", "healthy", "healthy", "diseased", 
                                                                                                                                                                                                                                                       "diseased"), cholesterol = c(228, 223, 213, 198, 166, 151, 195, 
                                                                                                                                                                                                                                                                                    199, 189, 196, 221, 156, 185, 230, 234, 174, 185, 236, 235, 180, 
                                                                                                                                                                                                                                                                                    165, 220, 160, 153, 250, 153, 184, 242, 212, 179, 224, 233, 181, 
                                                                                                                                                                                                                                                                                    199, 220, 214, 214, 248, 191, 162, 203, 173, 199, 187, 248, 189, 
                                                                                                                                                                                                                                                                                    173, 212, 164, 247), glucose = c(96, 78, 101, 119, 103, 91, 86, 
                                                                                                                                                                                                                                                                                                                     NA, 77, 80, 115, 85, 88, 109, NA, 71, 90, 94, 91, 87, 113, 93, 
                                                                                                                                                                                                                                                                                                                     97, 118, 109, 80, 85, 119, 99, 108, 89, 108, 97, 116, 79, 84, 
                                                                                                                                                                                                                                                                                                                     75, 81, 119, NA, 106, 109, 75, 82, 84, 75, 76, 120, 119, 77), 
               smoker = c("yes", "yes", "yes", "yes", "no", "yes", "no", 
                          "yes", "no", "no", "no", "no", "no", "yes", "no", "yes", 
                          "yes", "yes", "yes", "yes", "yes", "yes", "yes", "yes", "no", 
                          "no", "yes", "yes", "yes", "no", "no", "yes", "no", "yes", 
                          "no", "yes", "no", "yes", "yes", "yes", "no", "no", "yes", 
                          "no", "no", "no", "no", "no", "no", "yes"), exercise = c("occasional", 
                                                                                   "regular", "occasional", "regular", "none", "occasional", 
                                                                                   "regular", "none", "occasional", "none", "occasional", "none", 
                                                                                   "none", "regular", "occasional", "none", "regular", "regular", 
                                                                                   "none", "occasional", "none", "occasional", "occasional", 
                                                                                   "occasional", "regular", "occasional", "regular", "regular", 
                                                                                   "regular", "occasional", "occasional", "none", "none", "regular", 
                                                                                   "occasional", "occasional", "none", "none", "none", "none", 
                                                                                   "occasional", "regular", "regular", "none", "regular", "occasional", 
                                                                                   "occasional", "none", "occasional", "regular"), income = c(84820L, 
                                                                                                                                              81547L, 22588L, 72490L, 74533L, 25338L, 41469L, 57315L, 63629L, 
                                                                                                                                              88662L, 62615L, 56261L, 58499L, 82232L, 77584L, 77275L, 38468L, 
                                                                                                                                              54510L, 91326L, 78611L, 31402L, 29586L, 21441L, 58269L, 84173L, 
                                                                                                                                              88295L, 37940L, 43750L, 69750L, 92356L, 82518L, 91455L, 68866L, 
                                                                                                                                              51178L, 68275L, 27689L, 35418L, 81318L, 62405L, 86851L, 25654L, 
                                                                                                                                              47553L, 74474L, 51409L, 22607L, 55360L, 96351L, 21516L, 41927L, 
                                                                                                                                              55810L), education = c("master", "bachelor", "PhD", "master", 
                                                                                                                                                                     "bachelor", "highschool", "PhD", "highschool", "PhD", "PhD", 
                                                                                                                                                                     "bachelor", "highschool", "master", "bachelor", "PhD", "PhD", 
                                                                                                                                                                     "PhD", "bachelor", "master", "highschool", "PhD", "highschool", 
                                                                                                                                                                     "bachelor", "master", "highschool", "highschool", "master", 
                                                                                                                                                                     "master", "bachelor", "PhD", "highschool", "PhD", "master", 
                                                                                                                                                                     "master", "master", "PhD", "highschool", "master", "master", 
                                                                                                                                                                     "highschool", "bachelor", "highschool", "bachelor", "PhD", 
                                                                                                                                                                     "bachelor", "highschool", "master", "highschool", "bachelor", 
                                                                                                                                                                     "bachelor"), region = c("North", "South", "North", "West", 
                                                                                                                                                                                             "North", "West", "South", "South", "West", "South", "West", 
                                                                                                                                                                                             "South", "West", "East", "North", "West", "North", "North", 
                                                                                                                                                                                             "West", "North", "East", "West", "South", "North", "North", 
                                                                                                                                                                                             "East", "East", "North", "North", "West", "South", "West", 
                                                                                                                                                                                             "West", "East", "West", "North", "West", "North", "East", 
                                                                                                                                                                                             "North", "West", "South", "South", "East", "North", "West", 
                                                                                                                                                                                             "West", "East", "North", "East"), marital_status = c("divorced", 
                                                                                                                                                                                                                                                  "single", "divorced", "divorced", "divorced", "divorced", 
                                                                                                                                                                                                                                                  "divorced", "married", "divorced", "married", "divorced", 
                                                                                                                                                                                                                                                  "widowed", "married", "single", "widowed", "widowed", "single", 
                                                                                                                                                                                                                                                  "divorced", "widowed", "widowed", "single", "married", "single", 
                                                                                                                                                                                                                                                  "married", "widowed", "married", "single", "single", "widowed", 
                                                                                                                                                                                                                                                  "married", "widowed", "divorced", "single", "married", "single", 
                                                                                                                                                                                                                                                  "widowed", "widowed", "married", "widowed", "divorced", "married", 
                                                                                                                                                                                                                                                  "married", "divorced", "single", "married", "widowed", "divorced", 
                                                                                                                                                                                                                                                  "divorced", "single", "divorced")), row.names = c(NA, -50L
                                                                                                                                                                                                                                                  ), class = c("tbl_df", "tbl", "data.frame"))
```

### Missing Entries {.unnumbered}

```{r}
missing_values <- weird_data |> 
  summarise(
    across(everything(), 
           ~sum(is.na(.)), 
           .names = "missing_{.col}"))
missing_values

missing_values |> 
  pivot_longer(
    everything(), 
    names_to = "column", 
    values_to = "missing_count") |>
  filter(missing_count>0)
```

This code checks all columns for NA values. The \~ makes this an anonymous function so we do not need to make the function, and the "." is what tells the program to check the entire column. It then displays only the columns with missing values.

### Typos {.unnumbered}

To determine the number of typos, I made use of the **viewcols()** function that comes with the **UtilsDataRSV** package.

```{r}
UtilsDataRSV::view_cols(weird_data)

```

We can see that there are 2 typos:

-   "femal" in the gender column

-   "Healthy" in the disease_status column
